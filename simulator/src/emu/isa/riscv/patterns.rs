use super::{ImmType, Priv, Zicsr, RV32I, RV32M};

pub const RV32_I_PATTERN_ITER: &[(RV32I, ImmType, (u32, u32))] = &[
    (RV32I::Lui,     ImmType::U, remu_macro::mask_and_value!("??????? ????? ????? ??? ????? 01101 11")),
    (RV32I::Auipc,   ImmType::U, remu_macro::mask_and_value!("??????? ????? ????? ??? ????? 00101 11")),

    (RV32I::Jal,     ImmType::J, remu_macro::mask_and_value!("??????? ????? ????? ??? ????? 11011 11")),
    (RV32I::Jalr,    ImmType::I, remu_macro::mask_and_value!("??????? ????? ????? ??? ????? 11001 11")),

    (RV32I::Beq,     ImmType::B, remu_macro::mask_and_value!("??????? ????? ????? 000 ????? 11000 11")),
    (RV32I::Bne,     ImmType::B, remu_macro::mask_and_value!("??????? ????? ????? 001 ????? 11000 11")),
    (RV32I::Blt,     ImmType::B, remu_macro::mask_and_value!("??????? ????? ????? 100 ????? 11000 11")),
    (RV32I::Bge,     ImmType::B, remu_macro::mask_and_value!("??????? ????? ????? 101 ????? 11000 11")),
    (RV32I::Bltu,    ImmType::B, remu_macro::mask_and_value!("??????? ????? ????? 110 ????? 11000 11")),
    (RV32I::Bgeu,    ImmType::B, remu_macro::mask_and_value!("??????? ????? ????? 111 ????? 11000 11")),

    (RV32I::Lb,      ImmType::I, remu_macro::mask_and_value!("??????? ????? ????? 000 ????? 00000 11")),
    (RV32I::Lh,      ImmType::I, remu_macro::mask_and_value!("??????? ????? ????? 001 ????? 00000 11")),
    (RV32I::Lw,      ImmType::I, remu_macro::mask_and_value!("??????? ????? ????? 010 ????? 00000 11")),
    (RV32I::Lbu,     ImmType::I, remu_macro::mask_and_value!("??????? ????? ????? 100 ????? 00000 11")),
    (RV32I::Lhu,     ImmType::I, remu_macro::mask_and_value!("??????? ????? ????? 101 ????? 00000 11")),

    (RV32I::Sb,      ImmType::S, remu_macro::mask_and_value!("??????? ????? ????? 000 ????? 01000 11")),
    (RV32I::Sh,      ImmType::S, remu_macro::mask_and_value!("??????? ????? ????? 001 ????? 01000 11")),
    (RV32I::Sw,      ImmType::S, remu_macro::mask_and_value!("??????? ????? ????? 010 ????? 01000 11")),

    (RV32I::Addi,    ImmType::I, remu_macro::mask_and_value!("??????? ????? ????? 000 ????? 00100 11")),

    (RV32I::Slti,    ImmType::I, remu_macro::mask_and_value!("??????? ????? ????? 010 ????? 00100 11")),
    (RV32I::Sltiu,   ImmType::I, remu_macro::mask_and_value!("??????? ????? ????? 011 ????? 00100 11")),

    (RV32I::Xori,    ImmType::I, remu_macro::mask_and_value!("??????? ????? ????? 100 ????? 00100 11")),
    (RV32I::Ori,     ImmType::I, remu_macro::mask_and_value!("??????? ????? ????? 110 ????? 00100 11")),
    (RV32I::Andi,    ImmType::I, remu_macro::mask_and_value!("??????? ????? ????? 111 ????? 00100 11")),

    (RV32I::Slli,    ImmType::I, remu_macro::mask_and_value!("0000000 ????? ????? 001 ????? 00100 11")),
    (RV32I::Srli,    ImmType::I, remu_macro::mask_and_value!("0000000 ????? ????? 101 ????? 00100 11")),
    (RV32I::Srai,    ImmType::I, remu_macro::mask_and_value!("0100000 ????? ????? 101 ????? 00100 11")),

    (RV32I::Add,     ImmType::R, remu_macro::mask_and_value!("0000000 ????? ????? 000 ????? 01100 11")),
    (RV32I::Sub,     ImmType::R, remu_macro::mask_and_value!("0100000 ????? ????? 000 ????? 01100 11")),

    (RV32I::Xor,     ImmType::R, remu_macro::mask_and_value!("0000000 ????? ????? 100 ????? 01100 11")),
    (RV32I::Or,      ImmType::R, remu_macro::mask_and_value!("0000000 ????? ????? 110 ????? 01100 11")),
    (RV32I::And,     ImmType::R, remu_macro::mask_and_value!("0000000 ????? ????? 111 ????? 01100 11")),

    (RV32I::Slt,     ImmType::R, remu_macro::mask_and_value!("0000000 ????? ????? 010 ????? 01100 11")),
    (RV32I::Sltu,    ImmType::R, remu_macro::mask_and_value!("0000000 ????? ????? 011 ????? 01100 11")),

    (RV32I::Sll,     ImmType::R, remu_macro::mask_and_value!("0000000 ????? ????? 001 ????? 01100 11")),
    (RV32I::Srl,     ImmType::R, remu_macro::mask_and_value!("0000000 ????? ????? 101 ????? 01100 11")),
    (RV32I::Sra,     ImmType::R, remu_macro::mask_and_value!("0100000 ????? ????? 101 ????? 01100 11")),

    (RV32I::Fence,   ImmType::N, remu_macro::mask_and_value!("0000??? ????? 00000 000 00000 00011 11")),
    (RV32I::Ecall,   ImmType::N, remu_macro::mask_and_value!("0000000 00000 00000 000 00000 11100 11")),
    (RV32I::Ebreak,  ImmType::N, remu_macro::mask_and_value!("0000000 00001 00000 000 00000 11100 11")),
];


pub const RV32_M_PATTERN_ITER: &[(RV32M, ImmType, (u32, u32))] = &[
    (RV32M::Mul,     ImmType::R, remu_macro::mask_and_value!("0000001 ????? ????? 000 ????? 01100 11")),

    (RV32M::Mulh,    ImmType::R, remu_macro::mask_and_value!("0000001 ????? ????? 001 ????? 01100 11")),
    (RV32M::Mulhsu,  ImmType::R, remu_macro::mask_and_value!("0000001 ????? ????? 010 ????? 01100 11")),
    (RV32M::Mulhu,   ImmType::R, remu_macro::mask_and_value!("0000001 ????? ????? 011 ????? 01100 11")),

    (RV32M::Div,     ImmType::R, remu_macro::mask_and_value!("0000001 ????? ????? 100 ????? 01100 11")),
    (RV32M::Divu,    ImmType::R, remu_macro::mask_and_value!("0000001 ????? ????? 101 ????? 01100 11")),

    (RV32M::Rem,     ImmType::R, remu_macro::mask_and_value!("0000001 ????? ????? 110 ????? 01100 11")),
    (RV32M::Remu,    ImmType::R, remu_macro::mask_and_value!("0000001 ????? ????? 111 ????? 01100 11")),
];

pub const RV_ZICSR_PATTERN_ITER: &[(Zicsr, ImmType, (u32, u32))] = &[
    (Zicsr::Csrrw,   ImmType::I, remu_macro::mask_and_value!("??????? ????? ????? 001 ????? 11100 11")),
    (Zicsr::Csrrs,   ImmType::I, remu_macro::mask_and_value!("??????? ????? ????? 010 ????? 11100 11")),
    (Zicsr::Csrrc,   ImmType::I, remu_macro::mask_and_value!("??????? ????? ????? 011 ????? 11100 11")),
    
    (Zicsr::Csrrwi,  ImmType::U, remu_macro::mask_and_value!("??????? ????? ????? 101 ????? 11100 11")),
    (Zicsr::Csrrsi,  ImmType::U, remu_macro::mask_and_value!("??????? ????? ????? 110 ????? 11100 11")),
    (Zicsr::Csrrci,  ImmType::U, remu_macro::mask_and_value!("??????? ????? ????? 111 ????? 11100 11")),
];

pub const RV_PRIV_PATTERN_ITER: &[(Priv, ImmType, (u32, u32))] = &[
    (Priv::Mret,     ImmType::N, remu_macro::mask_and_value!("0011000 00010 00000 000 00000 11100 11")),
];
